--------------- Gene Family - Presence/Absence Matrix-----------------------------------

1) Download gbff cells from NCBI, to download all refseq bacterial genomes from NCBI, run the script `scripts/get_gbffs.sh`.
It will take a few hours (~10000 genomes), but optimizations can be made to make it run in parallel

Following steps are only considering all genomes in 1 genera, steps will be repeated for each genera (set of close genomes) for the analysis
Also, all python command were run in an anaconda environment, env file thesis_conda.yml)

2) Extract Sequences (gbfff to fasta)
Extract the protein and nucleotide seuqences from a set of gbffs to fasta files, 1 prot and 1 nuc per gbff.
All MGE elements are filtered out by regex (IS, transposon, viral, etc.)
    bash scripts/gbffToFasta.sh filepaths.txt outdir
filepaths.txt is a file where every line is an absolute file path to a gbff file.
2 dir are produced prot_outdir and nuc_outdir with the corresponding fasta files in them.

3) AllvsAll blast
Cat all individual genome .faas into on faa with all proteins
    cat *.faa > allgenomes.faa
Dedup the fast with a script
    scripts/dedupfasta.sh allgenomes.faa dd_allgenomes.faa

#installed diamond with conda, acticate conda thesis env, then call diamond normally
Next to all vs all blast to cluster genes into families, diamond command/params for allvsall blasting
first make databse from all proteins
    diamond makedb --in dd_allgenomes.faa -d dd_allgenomes
then all vs all blast with diamond
    diamond blastp --more-sensitive --matrix BLOSUM62 -e 5e-2 --query-cover 85 --no-self-hits -f 6 qseqid qlen length sseqid slen qcovhsp pident score bitscore evalue -q query.faa -d query --out query_allvsall.dmnd.out
    diamond blastp
            --more-sensitive                                                         #more sensitive, negligible time increase
            --matrix BLOSUM62                                                        #standard protein matrix, could be changed per geneus
            -e 5e-2                                                                  #taken from athena's thesis
            --query-cover 85                                                         #taken from athena's thesis
            --no-self-hits                                                           #repress self hits, reduce output table size
            -f 6 qseqid qlen length sseqid slen qcovhsp pident score bitscore evalue #output table formatting
            -q dd_allgenomes.faa                                                     #input
            -d dd_allgenomes                                                         #database to blast against
            --out query_allvsall.dmnd.out                                            #output table name

For some reason diamond doesnt output column names in output so just do the following
    echo qseqid qlen length sseqid slen qcovhsp pident score bitscore evalue > tmp
    vi tmp; :%s/ /\t/g #make the cols tab delimited like dmnd out
    cat query_allvsall.dmnd.out >> tmp
    mv tmp query_allvsall.dmnd.out #now tsv, readable from pandas

4) Single Link clustering into gene families
Using the blast table from the last step use python scipy module to cluster genes into families
    python single_link_clustering_blast_hits.py query_allvsall.dmnd.out dd_allgenomes.faa gene_families
This will output 2 files, gene_families.json which is a dictionary, key are arbitrary, values are lists of genes that form a family.
The other file is singltone_gene_families.faa which is a fasta file where each entry was grouped into a family by itself, and will be dealt with later.

5) Build matrix
Using the gene families, and a directory of all protein fasta files for the genus, outputs 4 files:
    - PA matrix (row are taxa, cols are gene families, A_ij is the number of
      genes in that gene family present in that organism
    - row index (row number and organism it corresponds to)
    - colum index (col number and gene family it corresponds to (ex 1:fam126
      ,where fam126 is a key in the gene_families.json dictionary)
    - binary PA matrix (same as PA matrix, but every value > 1 is set to 1)
Invoke as follows:
    python scripts/createPAmatrix.py gene_families.json targetdirectory pamatrix

6) Extract species tree genes and align
Next, using the matrix, the matrix index files, the gene families and a fasta
with all the nucleotide sequences.
All gene and species tree alingments are done with nucleotide files as the
taxa being compared are highly similar
There are 5 inputs:
    - the PA matrix (non-binary)
    - the column index file
    - the gene families file
    - nucleotide fasta with all genes in all taxa
    - outputname
3 output directories and 1 file are created:
    - species tree fastas (1 gene, homologs in all taxa per file)
    - fasta alingments (alignment of each gene fasta in fasta format)
    - nexus alingments (same fasta alingments, converted to nexus)
    - concatenated nexus alingment (1 nexus alignment with all seperate species tree genes, ready for mrbayes to make a species tree)
Invoke the command as follows:
    python extract_species_tree_seqs.py pamatrix.npy columindices.json genefamilies.json all_nuc_genes.fna species_tree_genes
